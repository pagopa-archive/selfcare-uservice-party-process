# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none
pr: none

resources:
  - repo: self

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    values:
      - dev
      - uat
      - prod
  - name: version
    displayName: docker image version form https://github.com/orgs/pagopa/packages/container/package/pdnd-interop-uservice-party-process
    type: string

variables:
  dockerfileRelativePath: '$(DOCKERFILE)' # Dockerfile

  # Agent VM image name for Build

  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'

  ${{ if eq(parameters['environment'], 'dev') }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    deployment: deployment-dev
    selfHostedAgentPool: $(DEV_AGENT_POOL)
  ${{ if eq(parameters['environment'], 'uat') }}:
    environment: 'UAT'
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    deployment: deployment-uat
    selfHostedAgentPool: $(UAT_AGENT_POOL)
  ${{ if eq(parameters['environment'], 'prod') }}:
    environment: 'PROD'
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    deployment: deployment-prod
    selfHostedAgentPool: $(PROD_AGENT_POOL)

# docker build -t container_tag --build-arg MYAPP_IMAGE=localimage:latest .

stages:
  - stage: 'Build'
    displayName: 'Build_and_Pusblih_to_${{ variables.environment }}'
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          # - task: Bash@3
          #   displayName: 'Docker login to external registry'
          #   env:
          #     DOCKER_REGISTRY_PAGOPA_USER: $(DOCKER_REGISTRY_PAGOPA_USER)
          #     DOCKER_REGISTRY_PAGOPA_TOKEN_RO: $(DOCKER_REGISTRY_PAGOPA_TOKEN_RO)
          #   inputs:
          #     script: echo $DOCKER_REGISTRY_PAGOPA_TOKEN_RO | docker login ghcr.io -u $DOCKER_REGISTRY_PAGOPA_USER --password-stdin
          - script: |
              echo $DOCKER_REGISTRY_PAGOPA_TOKEN_RO | docker login ghcr.io -u $DOCKER_REGISTRY_PAGOPA_USER --password-stdin
            env:
              DOCKER_REGISTRY_PAGOPA_USER: $(DOCKER_REGISTRY_PAGOPA_USER)
              DOCKER_REGISTRY_PAGOPA_TOKEN_RO: $(DOCKER_REGISTRY_PAGOPA_TOKEN_RO)
            displayName: 'Docker login to external registry'
          - task: Docker@2
            displayName: 'Build_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'Build'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              arguments: '--build-arg --APP_IMAGE $(DOCKER_BASE_IMAGE_NAME):${{ parameters.version }}'
              tags: |
                $(Build.BuildId)
                latest
                ${{ parameters.version }}
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'push'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
                ${{ parameters.version }}
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ variables.environment }}'
    dependsOn: ['Build']
    condition: succeeded()
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy_to_${{ variables.environment }}'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    rolloutStatusTimeout: 120
                    kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    containers: '$(containerRegistry)/$(imageRepository):${{ parameters.version }}'
